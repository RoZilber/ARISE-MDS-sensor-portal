# Generated by Django 4.2 on 2025-06-23 08:10

import colorfield.fields
from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_icon_picker.field
import encrypted_model_fields.fields
import sizefield.models
import timezone_field.fields


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('archiving', '0003_remove_tarfile_comboproject_alter_tarfile_archive'),
        ('external_storage_import', '0005_alter_datastorageinput_id'),
        ('data_models', '0031_alter_datafile_archived_alter_datafile_file_format_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='deployment',
            name='annotators',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='Viewers of deployment.', related_name='annotatable_deployments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='deployment',
            name='managers',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='Managers of deployment.', related_name='managed_deployments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='deployment',
            name='viewers',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='Annotators of deployment.', related_name='viewable_deployments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='archived',
            field=models.BooleanField(default=False, help_text='Has the file been archived?'),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='deployment',
            field=models.ForeignKey(help_text='Deployment to which this datafile is linked.', on_delete=django.db.models.deletion.CASCADE, related_name='files', to='data_models.deployment'),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='do_not_remove',
            field=models.BooleanField(default=False, help_text='If True, this file will not be removed during cleaning.'),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='extra_data',
            field=models.JSONField(blank=True, default=dict, help_text='Extra data that does not fit in existing columns.'),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='favourite_of',
            field=models.ManyToManyField(blank=True, help_text='Users who have favourited this file.', related_name='favourites', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='file_format',
            field=models.CharField(help_text='File extension.', max_length=10),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='file_name',
            field=models.CharField(db_index=True, help_text='File name.', max_length=150, unique=True),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='file_size',
            field=sizefield.models.FileSizeField(help_text='Size of file in bytes.'),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='file_type',
            field=models.ForeignKey(default=None, help_text='Data type of file.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='files', to='data_models.datatype'),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='file_url',
            field=models.CharField(blank=True, help_text='URL of this file', max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='has_human',
            field=models.BooleanField(db_index=True, default=False, help_text='True if this image has been annotated with a human.'),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='linked_files',
            field=models.JSONField(blank=True, default=dict, help_text='Linked files, such as alternative representations of this file.'),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='local_path',
            field=models.CharField(blank=True, help_text='Absolute file location on local storage, from which path is relative.', max_length=500),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='local_storage',
            field=models.BooleanField(db_index=True, default=True, help_text='Is the file available on local storage?'),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='original_name',
            field=models.CharField(blank=True, help_text='Original name of this file.', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='path',
            field=models.CharField(help_text='Relative path.', max_length=500),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='recording_dt',
            field=models.DateTimeField(db_index=True, help_text='Datetime at which the file was recored.', null=True),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='tag',
            field=models.CharField(blank=True, db_index=True, help_text='Additional identifying tag of this file.', max_length=250, null=True),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='tar_file',
            field=models.ForeignKey(blank=True, help_text='TAR file containing this file.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='files', to='archiving.tarfile'),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='thumb_url',
            field=models.CharField(blank=True, help_text='Thumbnail URL.', max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='upload_dt',
            field=models.DateTimeField(default=django.utils.timezone.now, help_text='Datetime at which the file was uploaded.'),
        ),
        migrations.AlterField(
            model_name='datatype',
            name='name',
            field=models.CharField(max_length=20),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='combo_project',
            field=models.CharField(blank=True, editable=False, help_text='String combining all projects.', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='deployment_ID',
            field=models.CharField(help_text='An identifier for a deployment.', max_length=80),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='deployment_device_ID',
            field=models.CharField(blank=True, editable=False, help_text="Unique identifier combining 'deployment_ID', 'device_type' and 'device_n'.", max_length=110, unique=True),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='deployment_end',
            field=models.DateTimeField(blank=True, help_text='End time of deployment. Can be NULL if deployment is ongoing.', null=True),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='deployment_start',
            field=models.DateTimeField(default=django.utils.timezone.now, help_text='Start datetime of deployment.'),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='device',
            field=models.ForeignKey(help_text='Device of which this is a deployment.', on_delete=django.db.models.deletion.PROTECT, related_name='deployments', to='data_models.device'),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='device_n',
            field=models.IntegerField(default=1, help_text="Numeric suffix of deployment, allowing for multiple deployments to share the same 'deployment_ID' and 'device_type'."),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='device_type',
            field=models.ForeignKey(help_text='Primary data type of deployment.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deployments', to='data_models.datatype'),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='extra_data',
            field=models.JSONField(blank=True, default=dict, help_text='Extra data that does not fit in other fields.'),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Is the deployment currently active? Checked every hour.'),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='last_image',
            field=models.ForeignKey(blank=True, editable=False, help_text='Last image (if any) linked to this deployment.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deployment_last_image', to='data_models.datafile'),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='latitude',
            field=models.DecimalField(blank=True, decimal_places=6, help_text='Latitude at which this deployment is placed.', max_digits=8, null=True),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='longitude',
            field=models.DecimalField(blank=True, decimal_places=6, help_text='Longitude at which this deployment is placed.', max_digits=8, null=True),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='Owner of deployment.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_deployments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='point',
            field=django.contrib.gis.db.models.fields.PointField(blank=True, help_text='Spatial point representing this deployment.', null=True, srid=4326),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='project',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='Projects to which this deployment is attached.', related_name='deployments', to='data_models.project'),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='site',
            field=models.ForeignKey(help_text='Site at which this deployment is placed.', on_delete=django.db.models.deletion.PROTECT, related_name='deployments', to='data_models.site'),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='thumb_url',
            field=models.CharField(blank=True, editable=False, help_text='Deployment thumbnail URL.', max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='deployment',
            name='time_zone',
            field=timezone_field.fields.TimeZoneField(default='UTC', help_text='Time zone to which files with time zone naive datetimes will be localised.', use_pytz=True),
        ),
        migrations.AlterField(
            model_name='device',
            name='annotators',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='Device annotators.', related_name='annotatable_devices', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='device',
            name='autoupdate',
            field=models.BooleanField(default=False, help_text='Is the device expected to autoupdate?'),
        ),
        migrations.AlterField(
            model_name='device',
            name='device_ID',
            field=models.CharField(help_text='Unique identifier for device, such as a serial number.', max_length=20, unique=True),
        ),
        migrations.AlterField(
            model_name='device',
            name='extra_data',
            field=models.JSONField(blank=True, default=dict, help_text="Extra data that doesn't fit in existing fields."),
        ),
        migrations.AlterField(
            model_name='device',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='device',
            name='input_storage',
            field=models.ForeignKey(blank=True, help_text='External storage, such as an FTP server.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='linked_devices', to='external_storage_import.datastorageinput'),
        ),
        migrations.AlterField(
            model_name='device',
            name='managers',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='Device managers.', related_name='managed_devices', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='device',
            name='model',
            field=models.ForeignKey(help_text='Device model.', on_delete=django.db.models.deletion.PROTECT, related_name='registered_devices', to='data_models.devicemodel'),
        ),
        migrations.AlterField(
            model_name='device',
            name='name',
            field=models.CharField(blank=True, help_text='Optional alternative name for device, potentially a more human readable name.', max_length=50),
        ),
        migrations.AlterField(
            model_name='device',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='Device owner.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_devices', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='device',
            name='password',
            field=encrypted_model_fields.fields.EncryptedCharField(blank=True, help_text='Device password to use with external storage, such as an FTP server.', null=True),
        ),
        migrations.AlterField(
            model_name='device',
            name='type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='devices', to='data_models.datatype'),
        ),
        migrations.AlterField(
            model_name='device',
            name='update_time',
            field=models.IntegerField(default=48, help_text='How often is the device expected to send files? Send users an email after this many hours have elapsed.'),
        ),
        migrations.AlterField(
            model_name='device',
            name='username',
            field=models.CharField(blank=True, default=None, help_text='Device username to use with external storage, such as an FTP server.', max_length=100, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='device',
            name='viewers',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='Device viewers.', related_name='viewable_devices', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='devicemodel',
            name='colour',
            field=colorfield.fields.ColorField(blank=True, default='', help_text='Override data type colour.', image_field=None, max_length=25, samples=None),
        ),
        migrations.AlterField(
            model_name='devicemodel',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='devicemodel',
            name='manufacturer',
            field=models.CharField(blank=True, help_text='Device model manufacturer.', max_length=50),
        ),
        migrations.AlterField(
            model_name='devicemodel',
            name='name',
            field=models.CharField(blank=True, help_text='Name of device model. This will be used to find a data handler if one is available.', max_length=50, unique=True),
        ),
        migrations.AlterField(
            model_name='devicemodel',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='User who registered this device model with the system.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_device_models', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='devicemodel',
            name='symbol',
            field=django_icon_picker.field.IconField(blank=True, help_text='Override data type symbol.', max_length=255),
        ),
        migrations.AlterField(
            model_name='devicemodel',
            name='type',
            field=models.ForeignKey(help_text='Primary data type of device.', on_delete=django.db.models.deletion.PROTECT, related_name='device_models', to='data_models.datatype'),
        ),
        migrations.AlterField(
            model_name='project',
            name='annotators',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='Project annotators.', related_name='annotatable_projects', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='project',
            name='archive',
            field=models.ForeignKey(blank=True, help_text='Data archive that data associated with this project will be uploaded to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='linked_projects', to='archiving.archive'),
        ),
        migrations.AlterField(
            model_name='project',
            name='clean_time',
            field=models.IntegerField(default=90, help_text='How long after last modification should an archived file be removed from local storage?'),
        ),
        migrations.AlterField(
            model_name='project',
            name='contact',
            field=models.CharField(blank=True, help_text='Name of primary contact.', max_length=50),
        ),
        migrations.AlterField(
            model_name='project',
            name='contact_email',
            field=models.CharField(blank=True, help_text='Contact email.', max_length=100),
        ),
        migrations.AlterField(
            model_name='project',
            name='data_storages',
            field=models.ManyToManyField(blank=True, help_text='External data storages (such as FTP server) that are available to users associated with this project.', related_name='linked_projects', to='external_storage_import.datastorageinput'),
        ),
        migrations.AlterField(
            model_name='project',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='project',
            name='managers',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='Project managers.', related_name='managed_projects', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='project',
            name='name',
            field=models.CharField(help_text='Full project name.', max_length=50),
        ),
        migrations.AlterField(
            model_name='project',
            name='objectives',
            field=models.CharField(blank=True, help_text='Project objectives description.', max_length=500),
        ),
        migrations.AlterField(
            model_name='project',
            name='organisation',
            field=models.CharField(blank=True, help_text='Organisation with which this project is associated.', max_length=100),
        ),
        migrations.AlterField(
            model_name='project',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='Project owner.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_projects', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='project',
            name='principal_investigator',
            field=models.CharField(blank=True, help_text='Full name of principal investigator.', max_length=50),
        ),
        migrations.AlterField(
            model_name='project',
            name='principal_investigator_email',
            field=models.CharField(blank=True, help_text='Principal investigator email.', max_length=100),
        ),
        migrations.AlterField(
            model_name='project',
            name='project_ID',
            field=models.CharField(blank=True, help_text='Unique project identifier.', max_length=20, unique=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='viewers',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='Project viewers.', related_name='viewable_projects', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='projectjob',
            name='celery_job_name',
            field=models.CharField(help_text='Name of registered celery task.', max_length=50),
        ),
        migrations.AlterField(
            model_name='projectjob',
            name='job_args',
            field=models.JSONField(default=dict, help_text='Additional arguments.'),
        ),
        migrations.AlterField(
            model_name='projectjob',
            name='job_name',
            field=models.CharField(help_text='Name of job', max_length=50),
        ),
        migrations.AlterField(
            model_name='site',
            name='name',
            field=models.CharField(max_length=50),
        ),
        migrations.AlterField(
            model_name='site',
            name='short_name',
            field=models.CharField(blank=True, max_length=10),
        ),
    ]
